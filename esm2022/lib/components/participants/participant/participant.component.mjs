import { Component, Input, ViewChild } from '@angular/core';
import { IconType } from '../../icon/icon.component';
import { TrackKind } from '../../../interfaces/tracks';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../icon/icon.component";
import * as i3 from "../../tracks/tracks.component";
class ParticipantComponent {
    constructor() {
        this.iconType = IconType;
    }
    maximized() {
        if (!this.participantElement?.nativeElement)
            return;
        // Obtener el elemento nativo
        const element = this.participantElement.nativeElement;
        //Verifica si el elemento está en pantalla completa
        if (document.fullscreenElement) {
            document.exitFullscreen();
            return;
        }
        // Verificar si el método requestFullscreen es compatible
        if (element.requestFullscreen) {
            element.requestFullscreen();
        }
        else if (element.webkitRequestFullscreen) { /* Safari */
            element.webkitRequestFullscreen();
        }
        else if (element.msRequestFullscreen) { /* IE11 */
            element.msRequestFullscreen();
        }
    }
    /**
     * Have video participant
     * @description Check if the participant have video
     * @returns {boolean}
     */
    haveVideo() {
        if (!this.participant)
            return false;
        const find = this.participant.tracks.find(track => track.kind === TrackKind.VIDEO);
        if (find)
            return true;
        return false;
    }
    trackById(index, track) {
        return track.id;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: ParticipantComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.11", type: ParticipantComponent, selector: "kitrtc-participant", inputs: { participant: "participant" }, viewQueries: [{ propertyName: "participantElement", first: true, predicate: ["participantElement"], descendants: true }], ngImport: i0, template: "<div class=\"participant\" #participantElement *ngIf=\"participant\">\n  <div class=\"participant__name\">{{ participant.id }}</div>\n  <div class=\"participant__media\">\n    <ng-container *ngFor=\"let track of participant.tracks, trackBy: trackById\">\n      <kitrtc-track [track]=\"track\" [local]=\"participant.local\"></kitrtc-track>\n    </ng-container >\n    <ng-container *ngIf=\"!haveVideo()\">\n      <div class=\"paticipant__media__icon\">\n        <kitrtc-icon [icon]=\"iconType.logo\"></kitrtc-icon>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"participant__controls\">\n    <button class=\"muted\" *ngIf=\"false\">\n      <kitrtc-icon [icon]=\"iconType.muted\"></kitrtc-icon>\n    </button>\n    <button class=\"maximized\">\n      <kitrtc-icon (click)=\"maximized()\" [icon]=\"iconType.maximized\"></kitrtc-icon>\n    </button>\n  </div>\n</div>\n", styles: [".participant{border:none;padding:10px;min-height:200px;max-height:200px;position:relative;background-color:#000000e6;border-radius:9px;overflow:hidden;transition:.3s box-shadow ease-in-out}.participant:hover{box-shadow:0 0 7px 2px #00000080}.participant .participant__media{position:absolute;inset:0}.participant .participant__media .paticipant__media__icon{width:100%;height:100%;background-color:#000000e6;cursor:unset;pointer-events:none}.participant .participant__media .paticipant__media__icon kitrtc-icon{display:block;width:100%;height:100%}.participant .participant__controls{position:absolute;bottom:5px;left:5px;right:5px;display:flex;justify-content:space-between}.participant .participant__controls button{border:none;border-radius:100%;display:flex;width:42px;height:42px;align-items:center;justify-content:center;background-color:#00000080;cursor:pointer}.participant .participant__controls button:hover{background-color:#000000b3}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.IconComponent, selector: "kitrtc-icon", inputs: ["icon", "size", "color"] }, { kind: "component", type: i3.TrackComponent, selector: "kitrtc-track", inputs: ["track", "local"] }] }); }
}
export { ParticipantComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: ParticipantComponent, decorators: [{
            type: Component,
            args: [{ selector: 'kitrtc-participant', template: "<div class=\"participant\" #participantElement *ngIf=\"participant\">\n  <div class=\"participant__name\">{{ participant.id }}</div>\n  <div class=\"participant__media\">\n    <ng-container *ngFor=\"let track of participant.tracks, trackBy: trackById\">\n      <kitrtc-track [track]=\"track\" [local]=\"participant.local\"></kitrtc-track>\n    </ng-container >\n    <ng-container *ngIf=\"!haveVideo()\">\n      <div class=\"paticipant__media__icon\">\n        <kitrtc-icon [icon]=\"iconType.logo\"></kitrtc-icon>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"participant__controls\">\n    <button class=\"muted\" *ngIf=\"false\">\n      <kitrtc-icon [icon]=\"iconType.muted\"></kitrtc-icon>\n    </button>\n    <button class=\"maximized\">\n      <kitrtc-icon (click)=\"maximized()\" [icon]=\"iconType.maximized\"></kitrtc-icon>\n    </button>\n  </div>\n</div>\n", styles: [".participant{border:none;padding:10px;min-height:200px;max-height:200px;position:relative;background-color:#000000e6;border-radius:9px;overflow:hidden;transition:.3s box-shadow ease-in-out}.participant:hover{box-shadow:0 0 7px 2px #00000080}.participant .participant__media{position:absolute;inset:0}.participant .participant__media .paticipant__media__icon{width:100%;height:100%;background-color:#000000e6;cursor:unset;pointer-events:none}.participant .participant__media .paticipant__media__icon kitrtc-icon{display:block;width:100%;height:100%}.participant .participant__controls{position:absolute;bottom:5px;left:5px;right:5px;display:flex;justify-content:space-between}.participant .participant__controls button{border:none;border-radius:100%;display:flex;width:42px;height:42px;align-items:center;justify-content:center;background-color:#00000080;cursor:pointer}.participant .participant__controls button:hover{background-color:#000000b3}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { participantElement: [{
                type: ViewChild,
                args: ['participantElement', { static: false }]
            }], participant: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljaXBhbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWVkaWFraXRhcHBqcy9zcmMvbGliL2NvbXBvbmVudHMvcGFydGljaXBhbnRzL3BhcnRpY2lwYW50L3BhcnRpY2lwYW50LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL21lZGlha2l0YXBwanMvc3JjL2xpYi9jb21wb25lbnRzL3BhcnRpY2lwYW50cy9wYXJ0aWNpcGFudC9wYXJ0aWNpcGFudC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFjLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3JELE9BQU8sRUFBUyxTQUFTLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7QUFFOUQsTUFNYSxvQkFBb0I7SUFNL0I7UUFGQSxhQUFRLEdBQUcsUUFBUSxDQUFDO0lBRUosQ0FBQztJQUVqQixTQUFTO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxhQUFhO1lBQUUsT0FBTztRQUVwRCw2QkFBNkI7UUFDN0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBSXZDLENBQUM7UUFFRixtREFBbUQ7UUFDbkQsSUFBSSxRQUFRLENBQUMsaUJBQWlCLEVBQUU7WUFDOUIsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQzFCLE9BQU87U0FDUjtRQUVELHlEQUF5RDtRQUN6RCxJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTtZQUM3QixPQUFPLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztTQUM3QjthQUFNLElBQUksT0FBTyxDQUFDLHVCQUF1QixFQUFFLEVBQUUsWUFBWTtZQUN4RCxPQUFPLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztTQUNuQzthQUFNLElBQUksT0FBTyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsVUFBVTtZQUNsRCxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFHRDs7OztPQUlHO0lBQ0gsU0FBUztRQUNQLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25GLElBQUksSUFBSTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQ3RCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUdELFNBQVMsQ0FBQyxLQUFhLEVBQUUsS0FBWTtRQUNuQyxPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDbEIsQ0FBQzsrR0FsRFUsb0JBQW9CO21HQUFwQixvQkFBb0IsNE5DWGpDLGczQkFxQkE7O1NEVmEsb0JBQW9COzRGQUFwQixvQkFBb0I7a0JBTmhDLFNBQVM7K0JBQ0Usb0JBQW9COzBFQU1zQixrQkFBa0I7c0JBQXJFLFNBQVM7dUJBQUMsb0JBQW9CLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO2dCQUV6QyxXQUFXO3NCQUFuQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYXJ0aWNpcGFudCB9IGZyb20gJy4uLy4uLy4uL2NsYXNzL3BhcnRpY2lwYW50JztcbmltcG9ydCB7IEljb25UeXBlIH0gZnJvbSAnLi4vLi4vaWNvbi9pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUcmFjaywgVHJhY2tLaW5kIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy90cmFja3MnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdraXRydGMtcGFydGljaXBhbnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vcGFydGljaXBhbnQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9wYXJ0aWNpcGFudC5jb21wb25lbnQuc2NzcyddXG59KVxuXG5leHBvcnQgY2xhc3MgUGFydGljaXBhbnRDb21wb25lbnQge1xuICBAVmlld0NoaWxkKCdwYXJ0aWNpcGFudEVsZW1lbnQnLCB7IHN0YXRpYzogZmFsc2UgfSkgcGFydGljaXBhbnRFbGVtZW50PzogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XG5cbiAgQElucHV0KCkgcGFydGljaXBhbnQ/OiBQYXJ0aWNpcGFudDtcbiAgaWNvblR5cGUgPSBJY29uVHlwZTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG1heGltaXplZCgpe1xuICAgIGlmICghdGhpcy5wYXJ0aWNpcGFudEVsZW1lbnQ/Lm5hdGl2ZUVsZW1lbnQpIHJldHVybjtcblxuICAgIC8vIE9idGVuZXIgZWwgZWxlbWVudG8gbmF0aXZvXG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMucGFydGljaXBhbnRFbGVtZW50Lm5hdGl2ZUVsZW1lbnQgYXMgSFRNTERpdkVsZW1lbnQgJiB7XG4gICAgICByZXF1ZXN0RnVsbHNjcmVlbj86ICgpID0+IFByb21pc2U8dm9pZD47XG4gICAgICB3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbj86ICgpID0+IFByb21pc2U8dm9pZD47XG4gICAgICBtc1JlcXVlc3RGdWxsc2NyZWVuPzogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICB9O1xuXG4gICAgLy9WZXJpZmljYSBzaSBlbCBlbGVtZW50byBlc3TDoSBlbiBwYW50YWxsYSBjb21wbGV0YVxuICAgIGlmIChkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCkge1xuICAgICAgZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBWZXJpZmljYXIgc2kgZWwgbcOpdG9kbyByZXF1ZXN0RnVsbHNjcmVlbiBlcyBjb21wYXRpYmxlXG4gICAgaWYgKGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4pIHtcbiAgICAgIGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHsgLyogU2FmYXJpICovXG4gICAgICBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4pIHsgLyogSUUxMSAqL1xuICAgICAgZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogSGF2ZSB2aWRlbyBwYXJ0aWNpcGFudFxuICAgKiBAZGVzY3JpcHRpb24gQ2hlY2sgaWYgdGhlIHBhcnRpY2lwYW50IGhhdmUgdmlkZW9cbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBoYXZlVmlkZW8oKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLnBhcnRpY2lwYW50KSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgZmluZCA9IHRoaXMucGFydGljaXBhbnQudHJhY2tzLmZpbmQodHJhY2sgPT4gdHJhY2sua2luZCA9PT0gVHJhY2tLaW5kLlZJREVPKTtcbiAgICBpZiAoZmluZCkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cblxuICB0cmFja0J5SWQoaW5kZXg6IG51bWJlciwgdHJhY2s6IFRyYWNrKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdHJhY2suaWQ7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJwYXJ0aWNpcGFudFwiICNwYXJ0aWNpcGFudEVsZW1lbnQgKm5nSWY9XCJwYXJ0aWNpcGFudFwiPlxuICA8ZGl2IGNsYXNzPVwicGFydGljaXBhbnRfX25hbWVcIj57eyBwYXJ0aWNpcGFudC5pZCB9fTwvZGl2PlxuICA8ZGl2IGNsYXNzPVwicGFydGljaXBhbnRfX21lZGlhXCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgdHJhY2sgb2YgcGFydGljaXBhbnQudHJhY2tzLCB0cmFja0J5OiB0cmFja0J5SWRcIj5cbiAgICAgIDxraXRydGMtdHJhY2sgW3RyYWNrXT1cInRyYWNrXCIgW2xvY2FsXT1cInBhcnRpY2lwYW50LmxvY2FsXCI+PC9raXRydGMtdHJhY2s+XG4gICAgPC9uZy1jb250YWluZXIgPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaGF2ZVZpZGVvKClcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJwYXRpY2lwYW50X19tZWRpYV9faWNvblwiPlxuICAgICAgICA8a2l0cnRjLWljb24gW2ljb25dPVwiaWNvblR5cGUubG9nb1wiPjwva2l0cnRjLWljb24+XG4gICAgICA8L2Rpdj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJwYXJ0aWNpcGFudF9fY29udHJvbHNcIj5cbiAgICA8YnV0dG9uIGNsYXNzPVwibXV0ZWRcIiAqbmdJZj1cImZhbHNlXCI+XG4gICAgICA8a2l0cnRjLWljb24gW2ljb25dPVwiaWNvblR5cGUubXV0ZWRcIj48L2tpdHJ0Yy1pY29uPlxuICAgIDwvYnV0dG9uPlxuICAgIDxidXR0b24gY2xhc3M9XCJtYXhpbWl6ZWRcIj5cbiAgICAgIDxraXRydGMtaWNvbiAoY2xpY2spPVwibWF4aW1pemVkKClcIiBbaWNvbl09XCJpY29uVHlwZS5tYXhpbWl6ZWRcIj48L2tpdHJ0Yy1pY29uPlxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19