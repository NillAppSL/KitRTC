import { LoggerColors } from "../interfaces/logger";
import { TrackKind } from "../interfaces/tracks";
import { Logger } from "./logger";
/**
 * TracksEvents
 * @description Tracks events control
 */
export class TracksEvents {
    constructor(constructorOptions, participant) {
        /**
         * Id
         * @description Id for track event
         */
        this.id = this.randomId();
        /**
         * Logger
         * @description Logger for track events
         */
        this.logger = new Logger();
        //Remote tracks events
        if (constructorOptions.RTCTrackEvent) {
            this.RTCTrackEvent = constructorOptions.RTCTrackEvent;
            //detect event ended track
            this.RTCTrackEvent.track.onended = (e) => {
                this.logger.log(LoggerColors.YELLOW, { event: 'onended', e });
            };
            this.RTCTrackEvent.track.onmute = (e) => {
                this.logger.log(LoggerColors.YELLOW, { event: 'onended', e });
            };
            this.RTCTrackEvent.track.onunmute = (e) => {
                this.logger.log(LoggerColors.YELLOW, { event: 'onended', e });
            };
            //detect event ended track
            for (const stream of this.RTCTrackEvent.streams) {
                stream.onremovetrack = (e) => {
                    this.logger.log(LoggerColors.YELLOW, { event: 'onremovetrack', e });
                    this.handleTrackEnded(e);
                };
                for (const track of stream.getTracks()) {
                    track.onended = (e) => {
                        this.logger.log(LoggerColors.YELLOW, { event: 'onended', e });
                        const trackEndedEvent = new MediaStreamTrackEvent('ended', { track });
                        this.handleTrackEnded(trackEndedEvent);
                    };
                    track.onmute = (e) => {
                        this.logger.log(LoggerColors.YELLOW, { event: 'onmute', e });
                    };
                    track.onunmute = (e) => {
                        this.logger.log(LoggerColors.YELLOW, { event: 'onunmute', e });
                    };
                }
            }
        }
        this.participant = participant;
        this.stream = constructorOptions.MediaStream;
        //on add track
        this.stream.onaddtrack = (e) => {
            this.logger.log(LoggerColors.YELLOW, { event: 'onaddtrack', e });
        };
        //on remove track
        this.stream.onremovetrack = (e) => {
            this.logger.log(LoggerColors.YELLOW, { event: 'onremovetrack', e });
            this.handleTrackEnded(e);
        };
    }
    /**
     * Random id
     * @returns generate random id
     */
    randomId() {
        return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
     * Handle track ended
     * @param mediaStreamTrackEvent
     */
    handleTrackEnded(mediaStreamTrackEvent) {
        const trackRemoved = this.participant.tracks.find((track) => track.id === mediaStreamTrackEvent.track.id);
        this.participant.tracks = this.participant.tracks.filter((track) => track.id !== mediaStreamTrackEvent.track.id);
        //emit event
        trackRemoved && this.participant.kitRtc.onRemoveRemoteMedia.next([this.participant, trackRemoved]);
    }
    /**
     * Get source from track
     * @param track is track for get source
     * @returns
     */
    getSource(track) {
        switch (track?.kind) {
            case TrackKind.AUDIO:
                const audio = document.createElement("audio");
                audio.srcObject = track.stream;
                audio.autoplay = true;
                audio.controls = true;
                audio.muted = false;
                return audio;
            case TrackKind.VIDEO:
                const video = document.createElement("video");
                video.srcObject = track.stream;
                video.autoplay = true;
                video.controls = true;
                video.muted = false;
                video.playsInline = true;
                return video;
        }
        return undefined;
    }
    /**
     * Remove all tracks events
     * @description Remove all tracks events
     */
    removeAllTracksEvents() {
        this.stream.onaddtrack = null;
        this.stream.onremovetrack = null;
        for (const stream of this.stream.getTracks()) {
            stream.onended = null;
            stream.onmute = null;
            stream.onunmute = null;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,